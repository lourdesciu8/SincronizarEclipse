package application;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;

import java.util.Arrays;
import java.util.List;

import database.Gestion;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.ScrollPane;

import javafx.scene.control.ComboBox;

import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.TableColumn;

public class VentanaProfesorController {
	@FXML
	private Label lblVentanaProfesor;
	@FXML
	private Label lblModulos;
	@FXML
	private ComboBox <String> comboModulos;
	@FXML
	private Label lblIDalumno;
	@FXML
	private Label lblNota;
	@FXML
	private Spinner <Integer> spinnerID;
	@FXML
	private Spinner <Double> spinnerNota;
	@FXML
	private Button btnGuardar;
	@FXML
	private Button btnSalir;
	@FXML
	private ScrollPane scrollPane;
	@FXML
	private TableView<ProfesorRow> table;

	@FXML
	private TableColumn<ProfesorRow, String> column;

	// ID del profesor (asignado al entrar)
    private int idProfesor;

    public void setIdProfesor(int id) {
        this.idProfesor = id;
        //lblVentanaProfesor.setText("Bienvenido" + idProfesor);
        cargarModulos();
    }
    
    @FXML
    private void initialize() {
    	// Para el ID (por ejemplo, de 0 a 9999, incrementos de 1)
        spinnerID.setValueFactory(
            new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 9999, 0, 1)
        );

        // Para la nota (por ejemplo, de 0.0 a 10.0, incrementos de 1)
        spinnerNota.setValueFactory(
            new SpinnerValueFactory.DoubleSpinnerValueFactory(0.0, 10.0, 0.0, 1.0)
        );
    	
    	scrollPane.setContent(table);

        // Configurar la única columna para mostrar la propiedad "info"
        column.setCellValueFactory(new PropertyValueFactory<>("info"));
    }
    
    private void cargarModulos() {
        List<String> modulos = Gestion.obtenerModulosParaProfesor(idProfesor);
        comboModulos.setItems(FXCollections.observableArrayList(modulos));
    }

    private void cargarAlumnosModulo(ActionEvent event) {
        String modulo = comboModulos.getSelectionModel().getSelectedItem();
        if (modulo != null) {
            table.getItems().clear();
            List<String[]> datos = Gestion.obtenerDatosModulos(modulo);
            ObservableList<ProfesorRow> rows = FXCollections.observableArrayList();
            for (String[] fila : datos) {
                // fila: [idAlumno, nombre, apellido, nota]
                String info = Arrays.toString(fila);
                rows.add(new ProfesorRow(info));
            }
            table.setItems(rows);
        }
    }
    
	
	  // Event Listener on ComboBox[#comboModulos].onAction
	  
	  @FXML public void actionComboBox(ActionEvent event) {
		  // TODO Autogenerated }
	  }
	  // Event Listener on Spinner[#spinnerID].onDragDetected
	  
	  @FXML public void actionSpinnerID(MouseEvent event) {
		  // TODO Autogenerated }
	  }
	  // Event Listener on Spinner[#spinnerNota].onDragDetected
	  
	  @FXML public void actionSpinnerNota(MouseEvent event) {
		  // TODO Autogenerated
	  }
	 
	
	// Event Listener on Button[#btnGuardar].onAction
	@FXML
	public void actionGuardar(ActionEvent event) {
		Integer idAlumno = spinnerID.getValue();
        Double notaNueva = spinnerNota.getValue();
        String moduloSeleccionado = comboModulos.getSelectionModel().getSelectedItem();

        if (moduloSeleccionado == null) {
            mostrarAlerta(AlertType.WARNING, "Advertencia", "Seleccione un módulo antes de guardar.");
            return;
        }
        if (idAlumno == null || notaNueva == null) {
            mostrarAlerta(AlertType.WARNING, "Datos incompletos", "Ingrese ID y Nota válidos.");
            return;
        }
        
        // Actualizar la nota en la BD
        boolean actualizado = Gestion.editarNota(idAlumno, moduloSeleccionado, notaNueva);
        if (actualizado) {
            mostrarAlerta(AlertType.INFORMATION, "Guardar Notas", "Nota actualizada correctamente.");
            // Opcional: refrescar la tabla
            cargarAlumnosModulo(null);
        } else {
            mostrarAlerta(AlertType.ERROR, "Error", "No se pudo actualizar la nota.");
        }
	}
	
	// Event Listener on Button[#btnSalir].onAction
	@FXML
	public void actionSalir(ActionEvent event) {
		   mostrarAlerta(AlertType.INFORMATION, "Cerrar Sesión", "Sesión Cerrada");
	        Stage stage = (Stage) btnSalir.getScene().getWindow();
	        stage.close();
	}
	
	private void mostrarAlerta(AlertType tipo, String cabecera, String contenido) {
        Alert alert = new Alert(tipo);
        alert.setTitle("Aviso");
        alert.setHeaderText(cabecera);
        alert.setContentText(contenido);
        alert.showAndWait();
    }

    // Clase interna para la fila de la tabla
    public static class ProfesorRow {
        private String info;
        public ProfesorRow(String info) {
            this.info = info;
        }
        public String getInfo() {
        	return info; }
        }
        public void setInfo(String info) {
    }
	
}
